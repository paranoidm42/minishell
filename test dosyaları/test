
void commo_seperate(const char *input, char *output)
{
        int xsingle = 0;
        int ydouble = 0;

    while (*input)
    {
        if (*input == '\'' && !ydouble)
        {
            xsingle--;
            if(xsingle == -2)
                xsingle = 0;
        }
        else if (*input == '"' && !xsingle)
        {
            ydouble--;
            if(ydouble == -2)
                ydouble = 0;
        }
        else
        {
            if (*input == '\'' || *input == '"')
                *output = *input;
            else
                 *output = *input;
            output++;
        }
        input++;
    }
    *output = '\0';
}

----------------
----------------
----------------

#include "minishell.h"
/*
 commo_seperate fonksiyonunun parçası,tırnaklar için flag kontrolü yapar.
*/
static int flag_check(char input, int *xsingle, int *ydouble)
{
    if (input == '\'' && !(*ydouble))
    {
        (*xsingle)--;
        if (*xsingle == -2)
            *xsingle = 0;
        return 0;
    }
    else if (input == '"' && !(*xsingle))
    {
        (*ydouble)--;
        if (*ydouble == -2)
            *ydouble = 0;
        return 0;
    }
    return 1;
}
/*
 commo_seperate fonksiyon bir metnin içindeki tırnakları eşleğenine göre kaldırır
*/
char *commo_seperate(const char *input)
{
    int xsingle = 0;
    int ydouble = 0;
    char *output;
    char *save;
    output = malloc(sizeof(char) * 255);
    if (output == NULL)
        return NULL;
    save = output;
    while (*input)
    {
        if (flag_check(*input, &xsingle, &ydouble))
        {
            if (*input == '\'' || *input == '"')
                *output = *input;
            else
                *output = *input;
            output++;
        }
        input++;
    }
    *output = '\0';
    if (ydouble == -1 || xsingle == -1)
        return (free(save),NULL);
    return save;
}

void lexer_main(t_data *data)
{
    char *outputText;
    outputText = commo_seperate(data->cmd);
    printf("%s\n", outputText);
}







int commo_len(char *str) {
    int xsingle = 0;
    int ydouble = 0;
    int i = 0;
    int len = 0;

    while (str[i]) {
        if (flag_check(str[i], &xsingle, &ydouble)) {
            while (str[i] != ' ' && str[i]) {
                len++;
                i++;
            }
        } else {
            len++;
        }
        if (str[i]) {
            i++;
        }
    }
    return len;
}


int	size_word(char const *s, char c, int i)
{
	int size;
	size = 0;
	while (s[i] != c && s[i])
	{
		size++;
		i++;
	}
    if(s[i] == c && c != ' ')
        while (s[i] != ' ')
        {
            i++;
            size++;
        }
	return (size);
}




















#include "minishell.h"

int	count_word(const char *s, char c)
{
	int	i;
	int	count;

	count = 0;
	i = 0;
	while (s[i])
	{
		while (s[i] && s[i] <= 32)
			i++;
		if (IS_QUOTE(s[i]))
		{
			c = s[i];
			i++;
			while (s[i] != c)
				i++;
			i++;
			count++;
		}
		if (s[i] && s[i] > 32)
		{
			while (s[i] && s[i] > 32)
				i++;
			count++;
		}
	}
	return (count);
}
int	size_word(char const *s, char c, int i)
{
	int	size;

	size = 0;
	while (s[i] != c && s[i])
	{
		size++;
		i++;
	}
	if (s[i] == c && c != ' ')
		while (s[i] != ' ')
		{
			i++;
			size++;
		}
	return (size);
}
int	quote_check(char const *s, int i, char c)
{
	if (c == '"')
		while (s[i] != c && s[i])
			i++;
	if (s[i] == c)
		return (i);
	return (0);
}

char	**lexer_split(char const *s, int i, int j)
{
	int		n;
	char	c;
	char	**sub;

	n = count_word(s, '"'); // ikinci argüman 25 satırdan kaçınmak için
	sub = (char **)malloc(sizeof(char *) * (n + 1));
	if (!sub)
		return (0);
	while (++j < n)
	{
		while (s[i] == ' ')
			i++;
		c = s[i];
		if (!IS_QUOTE(c))
		{
			sub[j] = ft_substr(s, i, size_word(s, ' ', i));
			i += size_word(s, ' ', i);
		}
		else
		{
			i++;
			if (!quote_check(s, i, c))
				return (ft_free(sub, j), 0);
			sub[j] = ft_substr(s, i, size_word(s, c, i));
			i += size_word(s, c, i);
		}
		i++;
	}
	sub[j] = 0;
	return (sub);
}

void	lexer_main(t_data *data)
{
	char	**command;
	int		i;

	command = lexer_split(data->cmd, 0, -1);
		// ikinci ve üçüncü argüman 25 satırdan kaçınmak için
	if (!command)
		return ;
	i = 0;
	while (command[i])
	{
		printf("%s\n", command[i]);
		i++;
	}
}




-----






char lexer_fill(char const *s, char **sub ,int i, int j, int n)
{
    char c;
    while (++j < n)
	{
		while (s[i] == ' ')
			i++;
		c = s[i];
		if (!IS_QUOTE(c))
		{
			sub[j] = ft_substr(s, i, size_word(s, ' ', i));
			i += size_word(s, ' ', i);
		}
		else
		{
			i++;
			if (!quote_check(s, i, c))
				return (ft_free(sub, j), 0);
			sub[j] = ft_substr(s, i, size_word(s, c, i));
			i += size_word(s, c, i);
		}
		i++;
	}
    sub[j] = 0;
    return (1);
}
char	**lexer_split(char const *s)
{
	int		n;
	char	**sub;

	n = count_word(s, '"'); // ikinci argüman 25 satırdan kaçınmak için
	sub = (char **)malloc(sizeof(char *) * (n + 1));
	if (!sub)
		return (0);
    if(!lexer_fill(s,sub,0,-1,n))
        return NULL;
	return (sub);
}




#!/bin/bash

merge_branch()
{
    git switch "$1"
    git pull
    git merge "$2"
    git add .
    git commit -m "$3"
    git push
}

local name="$1"

git merge main 2> /dev/null
git add . 2> /dev/null
git commit -m "ccur" 2> /dev/null
git push > /dev/null
merge_branch main ccur "42" 2> /dev/null
merge_branch ccur main "42" 2> /dev/null

